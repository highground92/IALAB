(defmodule LOAD (import MAINTRANSPORT ?ALL)(export ?ALL))

;Decido di non caricare se non potrò scaricare in futuro (per navi e aerei)
(defrule no-load (declare (salience 110))
  (next_trans(id_trans ?id_trans)(type_trans ?tt))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type ?tt)(capacity ?capacity)
             (type_route ?tr)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city)(route_id ?route_id))
  (city (id_state ?id_state)(id_city ?id_city)(requested_goods_quantity ?rgq1)
        (requested_goods_type ?good_type1)(provided_goods_quantity ?pgq1)(provided_goods_type ?pgt1))
  (not (city (id_state ?id_state)(id_city ?arrival&:(neq ?arrival ?id_city))(requested_goods_type ?pgt1)(route_id $?before ?route_id $?after)))
  (test (neq ?tt Truck))
=>
  (assert (action(type load)))
  (focus MOVE)
)

; Ho il mezzo scarico e la città mi può rifornire per tutta la mia capacità
(defrule load-transport-pos (declare (salience 100))
  (next_trans(id_trans ?id_trans)(type_trans ?tt))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type ?tt)(capacity ?capacity)
             (type_route ?tr)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?id_city)(requested_goods_quantity ?rgq )
        (requested_goods_type ?good_type)(provided_goods_quantity ?pgq)(provided_goods_type ?pgt))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(transport_type ?tt)(id_city ?id_city_arrival)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (total_cost ?fcostplanning)(weight ?hcostplanning)
                                 (total_distance ?totaldistanceplanning)
                  )
  (test(> ?pgq 0))
  (test(> ?pgq ?capacity))
  (test (< (* (- 12 ?capacity) 10) ?fcostplanning))
=>
  (modify ?stateplanning (id_transport ?id_trans)(transport_type ?tt)(id_city ?id_city)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?good_type)
                         (provided_goods_quantity (- ?pgq ?capacity))
                         (provided_goods_type ?pgt)
                         (trans_goods_quantity ?capacity)(trans_goods_type ?pgt)
                         (total_cost (* (- 12 ?capacity) 10))
                         (weight (* (- 12 ?capacity) 10))(total_distance 0)
  )
  (assert (action(type load)))
  (focus UPDATESTATE)
)

; Ho il mezzo scarico e la città mi può rifornire con beni <= alla capacità del mezzo
(defrule load-transport-neg-eq (declare (salience 100))
  (next_trans(id_trans ?id_trans)(type_trans ?tt))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type ?tt)(capacity ?capacity)
             (type_route ?tr)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?id_city)(requested_goods_quantity ?rgq )
        (requested_goods_type ?good_type)(provided_goods_quantity ?pgq)(provided_goods_type ?pgt))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(transport_type ?tt)(id_city ?id_city_arrival)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (total_cost ?fcostplanning)(weight ?hcostplanning)
                                 (total_distance ?totaldistanceplanning)
                  )
  (test(> ?pgq 0))
  (test(<= ?pgq ?capacity))
  (test (< (* (- 12 ?pgq) 10) ?fcostplanning))
=>
  (modify ?stateplanning (id_transport ?id_trans)(transport_type ?tt)(id_city ?id_city)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?good_type)
                         (provided_goods_quantity 0)
                         (provided_goods_type NA)
                         (trans_goods_quantity ?pgq)(trans_goods_type ?pgt)
                         (total_cost (* (- 12 ?pgq) 10))
                         (weight (* (- 12 ?pgq) 10))(total_distance 0)
  )
  (assert (action(type load)))
  (focus UPDATESTATE)
)

; Trasporto già caricato quindi non può fare la load(vado in unload)
(defrule load-transport-no-possible (declare (salience 90))
  (next_trans(id_trans ?id_trans)(type_trans ?tt))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type ?tt)(capacity ?capacity)
             (type_route ?tr)(trans_goods_quantity ?tgq)(trans_goods_type ?tgt)(city ?id_city))
  (test (> ?tgq 0))
=>
  (focus UNLOAD)
)

; Ho il mezzo scarico e mi trovo in una città che non mi può rifornire
(defrule load-transport-zero (declare (salience 80))
  (next_trans(id_trans ?id_trans)(type_trans ?tt))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type ?tt)(capacity ?capacity)
             (type_route ?tr)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?id_city)(requested_goods_quantity ?rgq )
        (requested_goods_type ?good_type)(provided_goods_quantity 0)(provided_goods_type NA))
=>
  (assert (action(type load)))
  (focus MOVE)
)
