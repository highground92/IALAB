(defmodule LOADTRANSPORT (import MAINEXPANDTRUCK ?ALL)(export ?ALL))

; Ho il mezzo scarico e la città mi può rifornire per tutta la mia capacità
(defrule load-transport-pos (declare (salience 100))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?id_city)(requested_goods_quantity ?rgq )
        (requested_goods_type ?good_type)(provided_goods_quantity ?pgq)(provided_goods_type ?pgt))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_arrival)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (f_cost ?fcostplanning)(h_cost ?hcostplanning)
                                 (g_cost ?gcostplanning)
                  )
  (test(> ?pgq 0))
  (test(> ?pgq ?capacity))
  (test (< (* (- 12 ?capacity) 10) ?fcostplanning))
=>
  (modify ?stateplanning (id_transport ?id_trans)(id_city ?id_city)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?good_type)
                         (provided_goods_quantity (- ?pgq ?capacity))
                         (provided_goods_type ?pgt)
                         (trans_goods_quantity ?capacity)(trans_goods_type ?pgt)
                         (f_cost (* (- 12 ?capacity) 10))
                         (h_cost (* (- 12 ?capacity) 10))(g_cost 0)
  )
  (assert (action(type load)))
  (printout t "In load transport pos" crlf)
  (focus UPDATESTATE)
)

; Ho il mezzo scarico e la città mi può rifornire con beni <= alla capacità del mezzo
(defrule load-transport-neg-eq (declare (salience 100))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?id_city)(requested_goods_quantity ?rgq )
        (requested_goods_type ?good_type)(provided_goods_quantity ?pgq)(provided_goods_type ?pgt))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_arrival)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (f_cost ?fcostplanning)(h_cost ?hcostplanning)
                                 (g_cost ?gcostplanning)
                  )
  (test(> ?pgq 0))
  (test(<= ?pgq ?capacity))
  (test (< (* (- 12 ?pgq) 10) ?fcostplanning))

=>
  (modify ?stateplanning (id_transport ?id_trans)(id_city ?id_city)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?good_type)
                         (provided_goods_quantity 0)
                         (provided_goods_type NA)
                         (trans_goods_quantity ?pgq)(trans_goods_type ?pgt)
                         (f_cost (* (- 12 ?pgq) 10))
                         (h_cost (* (- 12 ?pgq) 10))(g_cost 0)
  )
  (assert (action(type load)))
  (printout t "In load transport neg" crlf)

  (focus UPDATESTATE)
)

; Ho il mezzo scarico e mi trovo in una città che non mi può rifornire
(defrule load-transport-zero (declare (salience 80))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?id_city)(requested_goods_quantity ?rgq )
        (requested_goods_type ?good_type)(provided_goods_quantity 0)(provided_goods_type NA))
=>
  (assert (action(type load)))
  (focus MOVE)
)

; Trasporto già caricato quindi non può fare la load(vado in unload)
(defrule load-transport-no-possible (declare (salience 90))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity ?tgq)(trans_goods_type ?tgt)(city ?id_city))
  (test (> ?tgq 0))
=>
  (focus UNLOADTRANSPORT)
)
