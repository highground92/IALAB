(defmodule NEXTTRUCK (import UPDATESTATE ?ALL) (export ?ALL))

(defrule next-trans-done-load
  ?tmp<-(load)
  ?t <- (next_truck(id_truck ?id_truck))
  ?sp <- (state_planning(id_transport ?id_truck))
  (test (< ?id_truck 5))
=>
  (modify ?t (id_truck (+ ?id_truck 1)))
  (printout t "nuovo truck è: " (+ ?id_truck 1) crlf)
  (retract ?sp)
  (retract ?tmp)
  (pop-focus)
  (pop-focus)
  (pop-focus)
)

(defrule next-trans-done-unload
  ?tmp<-(unload)
  ?t <- (next_truck(id_truck ?id_truck))
  ?sp <- (state_planning(id_transport ?id_truck))
  (test (< ?id_truck 5))
=>
  (modify ?t (id_truck (+ ?id_truck 1)))
  (printout t "nuovo truck è: " (+ ?id_truck 1) crlf)
  (retract ?sp)
  (retract ?tmp)
  (pop-focus)
  (pop-focus)
  (pop-focus)
  (pop-focus)
)

(defrule next-trans-done-move
  ?tmp<-(move)
  ?t <- (next_truck(id_truck ?id_truck))
  ?sp <- (state_planning(id_transport ?id_truck))
  (test (< ?id_truck 5))
=>
  (modify ?t (id_truck (+ ?id_truck 1)))
  (printout t "nuovo truck è: " (+ ?id_truck 1) crlf)
  (retract ?sp)
  (retract ?tmp)
  (pop-focus)
  (pop-focus)
  (pop-focus)
  (pop-focus)
  (pop-focus)
)
;;;;;;;;;;
(defrule next-trans-end-done-load
  ?tmp<-(load)
  ?t <- (next_truck(id_truck ?id_truck))
  ?sp <- (state_planning(id_transport ?id_truck))
  (test (= ?id_truck 5))
=>
  (retract ?t)
  (retract ?sp)
  (retract ?tmp)
  (pop-focus)
  (pop-focus)
  (pop-focus)
)
(defrule next-trans-end-done-unload
  ?tmp<-(unload)
  ?t <- (next_truck(id_truck ?id_truck))
  ?sp <- (state_planning(id_transport ?id_truck))
  (test (= ?id_truck 5))
=>
  (retract ?t)
  (retract ?sp)
  (retract ?tmp)
  (pop-focus)
  (pop-focus)
  (pop-focus)
  (pop-focus)
)
(defrule next-trans-end-done-move
  ?tmp<-(move)
  ?t <- (next_truck(id_truck ?id_truck))
  ?sp <- (state_planning(id_transport ?id_truck))
  (test (= ?id_truck 5))
=>
  (retract ?t)
  (retract ?sp)
  (retract ?tmp)
  (pop-focus)
  (pop-focus)
  (pop-focus)
  (pop-focus)
  (pop-focus)
)
