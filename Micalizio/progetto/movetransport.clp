(defmodule MOVE (import LOADTRANSPORT ?ALL)(import UNLOADTRANSPORT ?ALL) (export ?ALL))

; Furgone vuoto e c'è una città adiacente che mi può completamente rifornire
(defrule move-empty-cargo-full (declare (salience 100))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq)(requested_goods_type ?rgt)
        (provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
  (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (f_cost ?fcostplanning)(h_cost ?hcostplanning)
                                 (g_cost ?gcostplanning)
                  )
  (test(> ?pgq 0))
  (test(>= ?pgq ?capacity))
  (test(< (+ (/ ?km ?pgq) ?km) ?fcostplanning))

=>
  (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?rgt)
                         (provided_goods_quantity ?pgq)
                         (provided_goods_type ?pgt)
                         (trans_goods_quantity 0)(trans_goods_type NA)
                         (f_cost (+ (/ ?km ?pgq) ?km))
                         (h_cost (/ ?km ?pgq))(g_cost ?km)
  )
  (assert(move))
  (focus NEXTTRUCK)
)
; Furgone vuoto e c'è una città adiacente che mi può rifornire non completamente (devo controllare le città successive)
(defrule move-empty-cargo-some (declare (salience 90))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq)(requested_goods_type ?rgt)
        (provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
  (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (f_cost ?fcostplanning)(h_cost ?hcostplanning)
                                 (g_cost ?gcostplanning)
                   )
  (test(> ?pgq 0))
  (test(< ?pgq ?capacity))
  (test(< (+ (/ ?km ?pgq) ?km) ?fcostplanning))

=>
  (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?rgt)
                         (provided_goods_quantity ?pgq)
                         (provided_goods_type ?pgt)
                         (trans_goods_quantity 0)(trans_goods_type NA)
                         (f_cost (+ (/ ?km ?pgq) ?km))
                         (h_cost (/ ?km ?pgq))(g_cost ?km)
  )
  (assert(move))
  (focus NEXTTRUCK)
)

; Furgone vuoto e in tutte le città adiacenti non c'è nessuna che mi può rifornire (devo controllare le città successive)
(defrule move-empty-cargo-none (declare (salience 80))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity 0)(trans_goods_type NA)(city ?id_city))
  (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq)(requested_goods_type ?rgt)
        (provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
  (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (f_cost ?fcostplanning)(h_cost ?hcostplanning)
                                 (g_cost ?gcostplanning)
                   )
  (test(= ?pgq 0))
=>
  (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?rgt)
                         (provided_goods_quantity ?pgq)
                         (provided_goods_type ?pgt)
                         (trans_goods_quantity 0)(trans_goods_type NA)
                         (f_cost (+ (* ?km 20) ?km))
                         (h_cost (* ?km 20))(g_cost ?km)
  )
  (assert(move))
  (focus NEXTTRUCK)
)
; ;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;
(defrule move-full-cargo-pos (declare (salience 100))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity ?tgq)(trans_goods_type ?good_type)(city ?id_city))
  (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq)(requested_goods_type ?good_type)
        (provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
  (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (f_cost ?fcostplanning)(h_cost ?hcostplanning)
                                 (g_cost ?gcostplanning)
                  )
  (test(> ?rgq 0))
  (test(> ?tgq 0))
  (test(>= ?tgq ?rgq))
  (test(< (+ (/ ?km ?tgq) ?km) ?fcostplanning))

=>
  (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?good_type)
                         (provided_goods_quantity ?pgq)
                         (provided_goods_type ?pgt)
                         (trans_goods_quantity ?tgq)(trans_goods_type ?good_type)
                         (f_cost (+ (/ ?km ?tgq) ?km))
                         (h_cost (/ ?km ?tgq))(g_cost ?km)
  )
  (assert(move))
  (focus NEXTTRUCK)
)
; Furgone vuoto e c'è una città adiacente che mi può rifornire non completamente (devo controllare le città successive)
(defrule move-full-cargo-neg (declare (salience 90))
  (next_truck(id_truck ?id_trans))
  (current (id_current ?id_state))
  (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
  (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)(capacity ?capacity)
             (type_route Ground)(trans_goods_quantity ?tgq)(trans_goods_type ?good_type)(city ?id_city))
  (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq)(requested_goods_type ?good_type)
        (provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
  (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))

  ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
                                 (requested_goods_quantity ?req_quantity)
                                 (requested_goods_type ?req_type)
                                 (provided_goods_quantity ?prov_quantity)
                                 (provided_goods_type ?prov_type)
                                 (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
                                 (f_cost ?fcostplanning)(h_cost ?hcostplanning)
                                 (g_cost ?gcostplanning)
                   )
  (test(> ?rgq 0))
  (test(> ?tgq 0))
  (test(< ?tgq ?rgq))
  (test(< (+ (/ ?km ?tgq) ?km) ?fcostplanning))

=>
  (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
                         (requested_goods_quantity ?rgq)
                         (requested_goods_type ?good_type)
                         (provided_goods_quantity ?pgq)
                         (provided_goods_type ?pgt)
                         (trans_goods_quantity ?tgq)(trans_goods_type ?good_type)
                         (f_cost (+ (/ ?km ?pgq) ?km))
                         (h_cost (/ ?km ?pgq))(g_cost ?km)
  )
  (assert(move))
  (focus NEXTTRUCK)
)















;
; (defrule move-some-cargo (declare (salience 100))
;   (next_truck(id_truck ?id_trans))
;   (current (id_current ?id_state))
;   (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
;   (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)
;              (type_route Ground)(trans_goods_quantity ?tgq)
;              (trans_goods_type ?good_type)(city ?id_city))
;   (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq )
;         (requested_goods_type ?good_type)(provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
;   (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))
;
;   ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
;                                  (requested_goods_quantity ?req_quantity)
;                                  (requested_goods_type ?req_quantity)
;                                  (provided_goods_quantity ?prov_quantity)
;                                  (provided_goods_type ?prov_type)
;                                  (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
;                                  (f_cost ?fcostplanning)(h_cost ?hcostplanning)
;                                  (g_cost ?gcostplanning)
;                    )
;   (test (neq ?id_city ?arrival))
;   (test (> ?rgq ?tgq))
;   (test (> ?tgq 0))
;   (test (< (+ (/ ?km ?tgq) ?km) ?fcostplanning)) ; calcolo dell'euristica
; =>
;   (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
;                          (requested_goods_quantity (- ?rgq ?tgq))
;                          (requested_goods_type ?good_type)
;                          (provided_goods_quantity ?pgq)
;                          (provided_goods_type ?pgt)
;                          (trans_goods_quantity 0)(trans_goods_type NA)
;                          (f_cost (+ (/ ?km ?tgq) ?km))
;                          (h_cost (/ ?km ?tgq))(g_cost ?km)
;   )
; )
; ;;;;;;;;;;;;;;;;;;;;;;
; ;;;;;;;;;;;;;;;;;;;;;
; (defrule expand-truck-quantity-neg (declare (salience 100)) ; La differenza é negativa
;   (next_truck(id_truck ?id_trans))
;   (current (id_current ?id_state))
;   (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
;   (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)
;              (type_route Ground)(trans_goods_quantity ?tgq)(trans_goods_type ?good_type)(city ?id_city))
;   (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq )
;         (requested_goods_type ?good_type)(provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
;   (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))
;
;   ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
;                                  (requested_goods_quantity ?req_quantity)
;                                  (requested_goods_type ?req_quantity)
;                                  (provided_goods_quantity ?prov_quantity)
;                                  (provided_goods_type ?prov_type)
;                                  (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
;                                  (f_cost ?fcostplanning)(h_cost ?hcostplanning)
;                                  (g_cost ?gcostplanning)
;                    )
;   (test (neq ?id_city ?arrival))
;   (test (> ?tgq 0))
;   (test (< ?rgq ?gq))
;   (test (< ?km ?fcostplanning))
; =>
;   (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
;                          (requested_goods_quantity 0)
;                          (requested_goods_type NA)
;                          (provided_goods_quantity ?pgq)
;                          (provided_goods_type ?pgt)
;                          (trans_goods_quantity (- ?tgq ?rgq))
;                          (trans_goods_type ?tgt)
;                          (f_cost ?km)
;                          (h_cost 0)(g_cost ?km)
;   )
; )
;
; (defrule expand-truck-quantity-zero (declare (salience 100)) ; La differenza é negativa
;   (next_truck(id_truck ?id_trans))
;   (current (id_current ?id_state))
;   (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
;   (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)
;              (type_route Ground)(trans_goods_quantity ?tgq)(trans_goods_type ?good_type)(city ?id_city))
;   (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq )
;         (requested_goods_type ?good_type)(provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
;   (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))
;
;   ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
;                                  (requested_goods_quantity ?req_quantity)
;                                  (requested_goods_type ?req_quantity)
;                                  (provided_goods_quantity ?prov_quantity)
;                                  (provided_goods_type ?prov_type)
;                                  (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
;                                  (f_cost ?fcostplanning)(h_cost ?hcostplanning)
;                                  (g_cost ?gcostplanning)
;                    )
;
;   (test (neq ?id_city ?arrival))
;   (test (> ?tgq 0))
;   (test (= ?rgq ?tgq))
;   (test (< ?km ?fcostplanning))
; =>
;   (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
;                          (requested_goods_quantity 0)
;                          (requested_goods_type NA)
;                          (provided_goods_quantity ?pgq)
;                          (provided_goods_type ?pgt)
;                          (trans_goods_quantity 0)
;                          (trans_goods_type NA)
;                          (f_cost ?km)
;                          (h_cost 0)(g_cost ?km)
;   )
; )
; ;Caso in cui le merci trasportate sul truck sono di tipologia differente da quelle richieste nella città
; (defrule expand-truck-different-type-goods (declare (salience 100))
;   (next_truck(id_truck ?id_trans))
;   (current (id_current ?id_state))
;   (state(id_state ?id_state)(f_cost ?f_cost)(h_cost ?h_cost)(g_cost ?g_cost))
;   (transport (id_state ?id_state)(id_transport ?id_trans)(transport_type Truck)
;              (type_route Ground)(trans_goods_quantity ?tgq)(trans_goods_type ?tgt)(city ?id_city))
;   (city (id_state ?id_state)(id_city ?arrival)(requested_goods_quantity ?rgq )
;         (requested_goods_type ?rgt)(provided_goods_quantity ?pgq)(provided_goods_type ?pgt))
;   (route(departure ?id_city)(arrival ?arrival)(km ?km)(type_route Ground))
;
;   ?stateplanning<-(state_planning(id_transport ?id_trans)(id_city ?id_city_planning)
;                                  (requested_goods_quantity ?req_quantity)
;                                  (requested_goods_type ?req_quantity)
;                                  (provided_goods_quantity ?prov_quantity)
;                                  (provided_goods_type ?prov_type)
;                                  (trans_goods_quantity ?goodsq)(trans_goods_type ?goodst)
;                                  (f_cost ?fcostplanning)(h_cost ?hcostplanning)
;                                  (g_cost ?gcostplanning)
;                    )
;   (test (neq ?id_city ?arrival))
;   (test (neq ?rgt ?tgt))
;   (test (> ?tgq 0))
;   (test (< (* 20 ?km) ?fcostplanning)) ; uso un moltiplicatore alto (20) perchè questa scelta risulti peggiore di ogni altra scelta in cui posso scaricare merci
; =>
;   (modify ?stateplanning (id_transport ?id_trans)(id_city ?arrival)
;                          (requested_goods_quantity ?rgq)
;                          (requested_goods_type ?rgt)
;                          (provided_goods_quantity ?pgq)
;                          (provided_goods_type ?pgt)
;                          (trans_goods_quantity ?tgq)
;                          (trans_goods_type ?tgt)
;                          (f_cost (+ (* 20 ?km) ?km))
;                          (h_cost (* 20 ?km))(g_cost ?km)
;   )
; )
;
; (defrule go-to-update (declare (salience 10))
;   (next_truck (id_truck ?id))
;   (state_planning(id_transport ?id))
; =>
;   (printout t "truck " ?id " vado in update" crlf)
;   (focus UPDATESTATE)
; )
